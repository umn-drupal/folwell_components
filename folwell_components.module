<?php

/**
 * Implements hook_editor_js_settings_alter().
 */
function folwell_components_editor_js_settings_alter(array &$settings) {
  // Add wysiwyg styles for buttons/links and image styles.
    if (isset($settings['editor']['formats']['rich_text'])) {
      $styles_array = [
        [
          'name' => 'Regular Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'bg-maroon btn'
          ]
        ],
        [
          'name' => 'Small Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'bg-maroon btn btn-small'
          ]
        ],
        [
          'name' => 'Emphasis Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'bg-maroon btn btn-arrow'
          ]
        ],
        [
          'name' => 'Outline Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'btn btn-outline'
          ]
        ],
        [
          'name' => 'Full-Width Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'bg-maroon btn btn-full'
          ]
        ],
        [
          'name' => 'Give Button',
          'element' => 'a',
          'attributes' => [
            'class' => 'btn btn-arrow btn-give'
          ]
        ],
        [
          'name' => 'Emphasis Link',
          'element' => 'a',
          'attributes' => [
            'class' => 'emphasis'
          ]
        ],
        [
          'element' => 'drupal-entity',
          'type' => 'widget',
          'widget' => 'drupalentity',
          'name' => '50% Image',
          'attributes' => ['class' => 'display-50']
        ],
        [
          'element' => 'drupal-entity',
          'type' => 'widget',
          'widget' => 'drupalentity',
          'name' => '33% Image',
          'attributes' => ['class' => 'display-33']
        ],
        [
          'element' => 'drupal-entity',
          'type' => 'widget',
          'widget' => 'drupalentity',
          'name' => '20% Image',
          'attributes' => ['class' => 'display-20']
        ],
        [
          'element' => 'drupal-entity',
          'type' => 'widget',
          'widget' => 'drupalentity',
          'name' => 'Full-width Image',
          'attributes' => ['class' => 'display-100']
        ],
        [
          'element' => 'drupal-entity',
          'type' => 'widget',
          'widget' => 'drupalentity',
          'name' => 'Circle Image',
          'attributes' => ['class' => 'img-circle']
        ]
      ];
      $settings['editor']['formats']['rich_text']['editorSettings']['stylesSet'] =
        is_array($settings['editor']['formats']['rich_text']['editorSettings']['stylesSet']) ?
        array_merge($settings['editor']['formats']['rich_text']['editorSettings']['stylesSet'], $styles_array) :
        $styles_array;
    }
}

function folwell_components_page_attachments(array &$page) {
  // Load in styles for component if component is actually in-use
  $plugin_libraries = [
    'fwcallout' => FALSE,
    'fwpullquote' => FALSE
  ];
  $editor_manager = \Drupal::entityTypeManager()->getStorage('editor');
  $editors = $editor_manager->loadMultiple();
  foreach ($editors as $editor) {
    // Iterate through configured editors to see if plugin buttons are used. If
    // libraries have previously been found, we don't need to continue here.
    if (in_array(FALSE, $plugin_libraries)) {
      $editor_settings = $editor->getSettings();
      $buttons = _flatten_array($editor_settings['toolbar']);
      foreach ($plugin_libraries as $plugin => &$load) {
        if (!$load) {
          if (in_array($plugin, $buttons)) {
            $load = TRUE;
          }
        }
      }
    }
  }
  $loaded_libraries = array_map(
    function($lib) {
      return 'folwell_components/' . $lib;
    },
    array_keys(
      array_filter($plugin_libraries,
        function($val) {
          return $val;
        }
      )
    )
  );
  $page['#attached']['library'] = !empty($page['#attached']['library']) ?
    array_merge($page['#attached']['library'], $loaded_libraries) : $loaded_libraries;
}

/**
 * @param $array
 * Take a nested array and flatten it down to single array of all its values
 * @return array
 */
function _flatten_array($array) {
  $return = [];
  array_walk_recursive($array, function($a) use (&$return) {
    $return[] = $a;
  });
  return $return;
}