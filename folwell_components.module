<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_editor_js_settings_alter().
 */
function folwell_components_editor_js_settings_alter(array &$settings) {
  // Add wysiwyg styles for buttons/links and image styles.
  if (isset($settings['editor']['formats']['folwell_ckeditor'])) {
    $styles_array = [
      [
        'name' => 'Regular Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'bg-maroon btn',
        ],
      ],
      [
        'name' => 'Small Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'bg-maroon btn btn-small',
        ],
      ],
      [
        'name' => 'Emphasis Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'bg-maroon btn btn-arrow',
        ],
      ],
      [
        'name' => 'Outline Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'btn btn-outline',
        ],
      ],
      [
        'name' => 'Full-Width Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'bg-maroon btn btn-full',
        ],
      ],
      [
        'name' => 'Give Button',
        'element' => 'a',
        'attributes' => [
          'class' => 'btn btn-arrow btn-give',
        ],
      ],
      [
        'name' => 'Emphasis Link',
        'element' => 'a',
        'attributes' => [
          'class' => 'emphasis',
        ],
      ],
      [
        'element' => 'drupal-entity',
        'type' => 'widget',
        'widget' => 'drupalentity',
        'name' => '50% Image',
        'attributes' => ['class' => 'display-50'],
      ],
      [
        'element' => 'drupal-entity',
        'type' => 'widget',
        'widget' => 'drupalentity',
        'name' => '33% Image',
        'attributes' => ['class' => 'display-33'],
      ],
      [
        'element' => 'drupal-entity',
        'type' => 'widget',
        'widget' => 'drupalentity',
        'name' => '20% Image',
        'attributes' => ['class' => 'display-20'],
      ],
      [
        'element' => 'drupal-entity',
        'type' => 'widget',
        'widget' => 'drupalentity',
        'name' => 'Full-width Image',
        'attributes' => ['class' => 'display-100'],
      ],
      [
        'element' => 'drupal-entity',
        'type' => 'widget',
        'widget' => 'drupalentity',
        'name' => 'Circle Image',
        'attributes' => ['class' => 'img-circle'],
      ],
      [
        'name' => 'Photo Credit',
        'element' => 'p',
        'attributes' => [
          'class' => 'photo-credit',
        ],
      ],
      [
        'name' => 'Intro Text',
        'element' => 'p',
        'attributes' => [
          'class' => 'txt-intro',
        ],
      ],
      [
        'name' => 'Link List',
        'element' => 'ul',
        'attributes' => [
          'class' => 'link-list'
        ],
      ],
    ];
    $settings['editor']['formats']['folwell_ckeditor']['editorSettings']['stylesSet'] =
      is_array($settings['editor']['formats']['folwell_ckeditor']['editorSettings']['stylesSet']) ?
      array_merge($settings['editor']['formats']['folwell_ckeditor']['editorSettings']['stylesSet'], $styles_array) :
      $styles_array;
  }
}

/**
 * Implements hook_page_attachments().
 *
 * @todo consider moving this into folwell_wysiwyg
 */
function folwell_components_page_attachments(array &$page) {
  // Load in styles for component if component is actually in-use.
  $plugin_libraries = [
    'fwcallout' => FALSE,
    'fwpullquote' => FALSE,
  ];
  $editor_manager = \Drupal::entityTypeManager()->getStorage('editor');
  $editors = $editor_manager->loadMultiple();
  foreach ($editors as $editor) {
    // Iterate through configured editors to see if plugin buttons are used. If
    // libraries have previously been found, we don't need to continue here.
    if (in_array(FALSE, $plugin_libraries)) {
      $editor_settings = $editor->getSettings();
      $buttons = _flatten_array($editor_settings['toolbar']);
      foreach ($plugin_libraries as $plugin => &$load) {
        if (!$load) {
          if (in_array($plugin, $buttons)) {
            $load = TRUE;
          }
        }
      }
    }
  }

  // Turn array of library name keys and bool values into a list of keys from
  // folwell_components.libraries.yml so they can attach to the page request.
  $loaded_libraries = array_map(
    function ($lib) {
      return 'folwell_components/' . $lib;
    },
    array_keys(
      array_filter(
        $plugin_libraries,
        function ($val) {
          return $val;
        }
      )
    )
  );
  $page['#attached']['library'] =
    !empty($page['#attached']['library']) ?
    array_merge($page['#attached']['library'], $loaded_libraries) :
    $loaded_libraries;
}

/**
 * Update paragraph widgets to assign button classes to actions.
 *
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * ERR Paragraphs is Paragraphs Classic widget. Only apply if current theme is
 * Folwell or a child of Folwell.
 */
function folwell_components_field_widget_entity_reference_paragraphs_form_alter(array &$element, FormStateInterface &$form_state, array $context) {
  $current_theme = \Drupal::theme()->getActiveTheme();
  if ($current_theme->getName() !== 'folwell') {
    $base_themes = array_keys($current_theme->getBaseThemeExtensions());
    if (!in_array('folwell', $base_themes)) {
      return;
    }
  }
  _folwell_components_find_actions($element);
}

/**
 * Update paragraph widgets to assign button classes to actions.
 *
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * This version is for Paragraphs Experimental widget. Only apply if current
 * theme is Folwell or a child of Folwell.
 *
 * @todo refactor these into a single function.
 */
function folwell_components_field_widget_paragraphs_form_alter(array &$element, FormStateInterface &$form_state, array $context) {
  $current_theme = \Drupal::theme()->getActiveTheme();
  if ($current_theme->getName() !== 'folwell') {
    $base_themes = array_keys($current_theme->getBaseThemeExtensions());
    if (!in_array('folwell', $base_themes)) {
      return;
    }
  }
  _folwell_components_find_actions($element);
}

/**
 * Recurse through form to find actions, apply classes.
 */
function _folwell_components_find_actions(&$element) {
  $children = Element::children($element);
  if (count($children) > 0) {
    foreach ($children as $child) {
      if ($element[$child]['#type'] == 'paragraphs_actions') {
        if (array_key_exists('actions', ($element[$child]))) {
          foreach ($element[$child]['actions'] as &$action) {
            $attributes = !empty($action['#attributes']) ? $action['#attributes'] : ['class' => []];
            $button_classes = ['btn', 'bg-maroon'];
            $attributes['class'] = array_unique(array_merge($attributes['class'], $button_classes));
            $action['#attributes'] = $attributes;
          }
        }
      }
      else {
        _folwell_components_find_actions($element[$child]);
      }
    }
  }
}

/**
 * Take a nested array and flatten it down to single array of all its values.
 *
 * @param array $array
 *   Array to be flattened.
 *
 * @return array
 *   Flattened array.
 */
function _flatten_array($array) {
  $return = [];
  array_walk_recursive($array, function($a) use (&$return) {
    $return[] = $a;
  });
  return $return;
}

